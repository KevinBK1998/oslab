alias functionNum R1;
alias givenPID R2;
if (functionNum == DISK_STORE) then
    alias pageNum R3;
    alias blockNum R4;
    multipush(R1,R2,R3,R4);
    R1=ACQUIRE_DISK;
    R2=givenPID;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    [DISK_STATUS_TABLE+1]=1;
    [DISK_STATUS_TABLE+2]=pageNum;
    [DISK_STATUS_TABLE+3]=blockNum;
    store(pageNum,blockNum);

    [PROCESS_TABLE+16*givenPID+4]=WAIT_DISK;
    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);
else if (functionNum == DISK_LOAD) then
    alias pageNum R3;
    alias blockNum R4;
    multipush(R1,R2,R3,R4);
    R1=ACQUIRE_DISK;
    R2=[SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    [DISK_STATUS_TABLE+1]=0;
    [DISK_STATUS_TABLE+2]=pageNum;
    [DISK_STATUS_TABLE+3]=blockNum;
    load(pageNum,blockNum);

    [PROCESS_TABLE+16*givenPID+4]=WAIT_DISK;
    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);
else if (functionNum == TERMINAL_WRITE) then
    alias word R3;
    multipush(R1,R2,R3);
    R1=ACQUIRE_TERMINAL;
    R2=[SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3);
    print word;
    multipush(R1,R2,R3);
    R1=RELEASE_TERMINAL;
    R2=[SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3);
else if (functionNum == TERMINAL_READ) then
    alias address R3;
    multipush(R1,R2,R3);
    R1=ACQUIRE_TERMINAL;
    R2=[SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3);
    read;
    [PROCESS_TABLE+16*givenPID+4]=WAIT_TERMINAL;
    multipush(R1,R2,R3);
    call SCHEDULER;
    multipop(R1,R2,R3);
    alias pageNum R4;
    pageNum = address/512;
    alias offset R5;
    offset = address % 512;
    address = [PAGE_TABLE_BASE+20 * givenPID +2* pageNum]*512 + offset;
    [address]=[PROCESS_TABLE+16*givenPID+8];
endif;
endif;
endif;
endif;
return;
