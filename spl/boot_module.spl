// Load Exception Handler
loadi(2,15);
loadi(3,16);
// Load Timer interrupt
loadi(4,17);
loadi(5,18);
// Load interrupt 7
loadi(16,29);
loadi(17,30);

// Load Library code
loadi(63,13);
loadi(64,14);
// Load Init code
loadi(65,7);
loadi(66,8);

// Set up page table for init process
alias initPTBR R0;
initPTBR=PAGE_TABLE_BASE+20;
//2 LIBRARY PAGES
[initPTBR+0] = 63;
[initPTBR+1] = "0100";
[initPTBR+2] = 64;
[initPTBR+3] = "0100";
//2 HEAP PAGES
[initPTBR+4] = 78;
[initPTBR+5] = "0110";
[initPTBR+6] = 79;
[initPTBR+7] = "0110";
//4 CODE PAGES
[initPTBR+8] = 65;
[initPTBR+9] = "0100";
[initPTBR+10] = 66;
[initPTBR+11] = "0100";
[initPTBR+12] = -1;
[initPTBR+13] = "0000";
[initPTBR+14] = -1;
[initPTBR+15] = "0000";
//2 STACK PAGES
[initPTBR+16] = 76;
[initPTBR+17] = "0110";
[initPTBR+18] = 77;
[initPTBR+19] = "0110";

// Set up process table for init process
alias initPROCESS_TABLE R1;
initPROCESS_TABLE=PROCESS_TABLE+16;
[initPROCESS_TABLE+1]=1;
[initPROCESS_TABLE+4]=CREATED;
[initPROCESS_TABLE+11]=80;
[initPROCESS_TABLE+12]=0;
[initPROCESS_TABLE+13]=8*512;
[initPROCESS_TABLE+14]=PAGE_TABLE_BASE+20;
[initPROCESS_TABLE+15]=10;

// Set entry value from the header to top of stack
[76*512] = [65*512+1];
return;