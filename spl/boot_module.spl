// Operating System Modules

// Load InodeUser table
loadi(59,3);
loadi(60,4);
// Load DiskFree list
loadi(61,2);

// Load Exception Handler
loadi(2,15);
loadi(3,16);
// Load Timer interrupt
loadi(4,17);
loadi(5,18);
// Load Disk interrupt
loadi(6,19);
loadi(7,20);
// Load Console interrupt
loadi(8,21);
loadi(9,22);
// Load interrupt 6
loadi(14,27);
loadi(15,28);
// Load interrupt 7
loadi(16,29);
loadi(17,30);
// Load interrupt 8
loadi(18,31);
loadi(19,32);
// Load interrupt 9
loadi(20,33);
loadi(21,34);
// Load interrupt 10
loadi(22,35);
loadi(23,36);
// Load module 0
loadi(40,53);
loadi(41,54);
// Load module 1
loadi(42,55);
loadi(43,56);
// Load module 2
loadi(44,57);
loadi(45,58);
// Load module 4
loadi(48,61);
loadi(49,62);
// Load module 5
loadi(50,63);
loadi(51,64);

// User Program Modules

// Load Library code
loadi(63,13);
loadi(64,14);
// Load Init code
loadi(65,7);
loadi(66,8);

// Set terminated for all processes
alias pid R0;
pid = 1;
while(pid < 16) do
    [PROCESS_TABLE + 16 * pid + 4] = TERMINATED;
    pid = pid + 1;
endwhile;

alias pageNum R0;
pageNum = 0;
while(pageNum < 76) do
    [MEMORY_FREE_LIST + pageNum] = 1;
    pageNum = pageNum + 1;
endwhile;
while(pageNum < MAX_MEM_PAGE) do
    [MEMORY_FREE_LIST + pageNum] = 0;
    pageNum = pageNum + 1;
endwhile;

[TERMINAL_STATUS_TABLE]=0;

// Set up page table for init process
alias initPTBR R1;
initPTBR=PAGE_TABLE_BASE+20;
//2 LIBRARY PAGES
[initPTBR+0] = 63;
[initPTBR+1] = "0100";
[initPTBR+2] = 64;
[initPTBR+3] = "0100";
//2 HEAP PAGES
[initPTBR+4] = 78;
[initPTBR+5] = "0110";
[initPTBR+6] = 79;
[initPTBR+7] = "0110";
//4 CODE PAGES
[initPTBR+8] = 65;
[initPTBR+9] = "0100";
[initPTBR+10] = 66;
[initPTBR+11] = "0100";
[initPTBR+12] = -1;
[initPTBR+13] = "0000";
[initPTBR+14] = -1;
[initPTBR+15] = "0000";
//2 STACK PAGES
[initPTBR+16] = 76;
[initPTBR+17] = "0110";
[initPTBR+18] = 77;
[initPTBR+19] = "0110";

// Set up process table for init process
alias initPROCESS_TABLE R2;
initPROCESS_TABLE=PROCESS_TABLE+16;
[initPROCESS_TABLE+1]=1;
[initPROCESS_TABLE+4]=CREATED;
[initPROCESS_TABLE+11]=80;
[initPROCESS_TABLE+12]=0;
[initPROCESS_TABLE+13]=8*512;
[initPROCESS_TABLE+14]=initPTBR;
[initPROCESS_TABLE+15]=10;

// Set Initial Values

// init per process resource table
alias resourceIndex R3;
resourceIndex=0;
while (resourceIndex < 8) do
    [80*512+RESOURCE_TABLE_OFFSET+resourceIndex*2]=-1;
    resourceIndex=resourceIndex+1;
endwhile;

// init per process Disk Map Table entries
alias index R3;
index = 0;
while (index<10) do
    [DISK_MAP_TABLE + 10 + index]=-1;
    index=index+1;
endwhile;
[DISK_MAP_TABLE + 14]=7;
[DISK_MAP_TABLE + 15]=8;

[MEMORY_FREE_LIST+76]=1;
[MEMORY_FREE_LIST+77]=1;
[MEMORY_FREE_LIST+78]=1;
[MEMORY_FREE_LIST+79]=1;
[MEMORY_FREE_LIST+80]=1;
// Set MEM_FREE_COUNT needs to be calculated
[SYSTEM_STATUS_TABLE+2]=128-7;
[SYSTEM_STATUS_TABLE+3]=0;
// Set entry value from the header to top of stack
[76*512] = [65*512+1];

return;