// Load Boot module
loadi(54,67);
loadi(55,68);
// Load Idle code
loadi(69,11);
loadi(70,12);

// Set SP to top of kernel stack of idle process
SP=82*512-1;
call BOOT_MODULE;

// Set up page table for pid 0
PTBR = PAGE_TABLE_BASE;
PTLR = 10;
//2 LIBRARY PAGES
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";
//2 HEAP PAGES
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
//4 CODE PAGES
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//2 STACK PAGES
R1=GET_FREE_PAGE;
call MEMORY_MANAGER;
alias firstStackPage R1;
firstStackPage=R0;
[PTBR+16] = firstStackPage;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// Set up process table for pid 0
[PROCESS_TABLE+1]=0;
[PROCESS_TABLE+4]=RUNNING;
alias userAreaPageNumber R0;
multipush(R1);
R1=GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R1);
[PROCESS_TABLE+11]=userAreaPageNumber;
[PROCESS_TABLE+12]=0;
[PROCESS_TABLE+13]=8*512;
[PROCESS_TABLE+14]=PAGE_TABLE_BASE;
[PROCESS_TABLE+15]=10;

// Set up system status table
[SYSTEM_STATUS_TABLE + 1]=0;

// Set entry value from the header to top of stack
[firstStackPage*512] = [69*512+1];
//Set SP to start of page 9
SP=8*512;
ireturn;