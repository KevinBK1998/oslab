//breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = INT_EXEC;
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 -1;

alias physicalPageNum R1;
alias offset R2;
alias firstArgPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
firstArgPhysicalAddr = (physicalPageNum * 512) + offset;
alias firstArgument R4;
firstArgument=[firstArgPhysicalAddr];

alias inode_index R5;
inode_index=INODE_TABLE;
while(inode_index < INODE_TABLE + 16*MAX_FILE_NUM) do
    alias filename R6;
	filename = [inode_index + 1];
	alias filetype R7;
	filetype = [inode_index];
	if(filename == firstArgument && filetype == EXEC) then
        break;
	endif;
    inode_index = inode_index + 16;
endwhile;

if (inode_index < INODE_TABLE + 16*MAX_FILE_NUM)
then
    multipush(R0,R1,R2,R3,R4,R5,R6);
    R1=EXIT_PROCESS;
    R2=[SYSTEM_STATUS_TABLE+1];
    call PROCESS_MANAGER;
    multipop(R0,R1,R2,R3,R4,R5,R6);
    alias physicalAddrRetVal R7;
    physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = 0;
else
    alias physicalAddrRetVal R7;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;
endif;
SP = userSP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
//breakpoint;
ireturn;
