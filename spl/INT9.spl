[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = INT_EXEC;
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 -1;

alias physicalPageNum R1;
alias offset R2;
alias firstArgPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
firstArgPhysicalAddr = (physicalPageNum * 512) + offset;
alias firstArgument R4;
firstArgument=[firstArgPhysicalAddr];

// Find Exec file
alias inode_index R5;
inode_index=0;
while(inode_index < MAX_FILE_NUM) do
    alias filename R6;
	filename = [INODE_TABLE + inode_index*16 + 1];
	alias filetype R7;
	filetype = [INODE_TABLE + inode_index*16];
	if(filename == firstArgument && filetype == EXEC) then
        break;
	endif;
    inode_index = inode_index + 1;
endwhile;

if (inode_index < MAX_FILE_NUM)
then
    alias currentPID R6;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    multipush(R0,R1,R2,R3,R4,R5,R6);
    R1=EXIT_PROCESS;
    R2=currentPID;
    call PROCESS_MANAGER;
    multipop(R0,R1,R2,R3,R4,R5,R6);


    alias userAreaPageNumber R7;
    userAreaPageNumber = [PROCESS_TABLE + currentPID*16 + 11];
    [MEMORY_FREE_LIST+userAreaPageNumber]=[MEMORY_FREE_LIST+userAreaPageNumber]+1;
    [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
    SP=userAreaPageNumber*512-1;
    [PROCESS_TABLE + currentPID*16 + 4]=RUNNING;
    [PROCESS_TABLE + currentPID*16 + 7]=inode_index;

    // init per process resource table
    alias resourceIndex R8;
    resourceIndex=0;
    while (resourceIndex < 8) do
        [userAreaPageNumber*512+RESOURCE_TABLE_OFFSET+resourceIndex*2]=-1;
        resourceIndex=resourceIndex+1;
    endwhile;

    alias pageTableBase R8;
    pageTableBase = PAGE_TABLE_BASE + currentPID * 20;
    // Library Pages
    [pageTableBase+0]=63;
    [pageTableBase+1]="0100";
    [pageTableBase+2]=64;
    [pageTableBase+3]="0100";

    alias free_page R0;
    // Heap Pages
    [pageTableBase+4]=-1;
    [pageTableBase+5]="0000";
    [pageTableBase+6]=-1;
    [pageTableBase+7]="0000";

    // init all Disk Map Table entries
    alias index R9;
    index = 0;
    while (index<10) do
        alias blockNum R10;
        blockNum=-1;
        if (index >=4 && index <8) then
            blockNum=[INODE_TABLE + inode_index*16 + 4 + index];
        endif;
        [DISK_MAP_TABLE + currentPID*10 + index]=blockNum;
        index=index+1;
    endwhile;

    // first Code page
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
    R1=GET_CODE_PAGE;
    R2=[DISK_MAP_TABLE + currentPID*10 + 4];
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

    [pageTableBase + 8]=free_page;
    [pageTableBase + 9]="0100";

    // Stack Pages
    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1=GET_FREE_PAGE;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);
    [pageTableBase+16]=free_page;
    [pageTableBase+17]="0110";

    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1=GET_FREE_PAGE;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);
    [pageTableBase+18]=free_page;
    [pageTableBase+19]="0110";

    // Store entry point IP on top of user stack
    [[pageTableBase+16]*512] = [[pageTableBase+8]*512+1];
    userSP=8*512;
else
    alias physicalAddrRetVal R7;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;
endif;
SP = userSP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
ireturn;
