[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = INT_SEMGET;
alias userSP R0;
userSP = SP;
alias currentPID R1;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID*16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID*16 + 11] * 512 -1;

alias systemCall R2;
alias retAddress R3;
systemCall = [([PTBR + 2 * (userSP - 5)/ 512] * 512) + ((userSP - 5) % 512)];

if (systemCall == INT_SEMGET) then
    [PROCESS_TABLE + currentPID*16 + 9]=systemCall;
    alias userAreaPageNumber R3;
    alias i R4;
    userAreaPageNumber = [PROCESS_TABLE + currentPID*16 + 11];

    // find free entry in resource table
    i=0;
    while (i < 8) do
        if ([userAreaPageNumber*512+RESOURCE_TABLE_OFFSET+i*2]==-1) then
            break;
        endif;
        i=i+1;
    endwhile;

    alias semIndex R6;
    multipush(R0,R1,R2,R3,R4);
    R2=currentPID;
    R1=ACQUIRE_SEMAPHORE;
    call RESOURCE_MANAGER;
    semIndex=R0;
    multipop(R0,R1,R2,R3,R4);

    [userAreaPageNumber*512+RESOURCE_TABLE_OFFSET+i*2] = SEMAPHORE;
    [userAreaPageNumber*512+RESOURCE_TABLE_OFFSET+i*2+1] = semIndex;
    retAddress=([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
    [retAddress]=i;
else if (systemCall == INT_SEMRELEASE) then
    [PROCESS_TABLE + currentPID*16 + 9]=systemCall;
    alias userAreaPageNumber R3;
    alias semId R4;
    userAreaPageNumber = [PROCESS_TABLE + currentPID*16 + 11];
    semId = [([PTBR + 2 * (userSP - 4)/ 512] * 512) + ((userSP - 4) % 512)];

    multipush(R1,R2,R3,R4);
    R2=[userAreaPageNumber*512+RESOURCE_TABLE_OFFSET+semId*2+1];
    R3=currentPID;
    R1=RELEASE_SEMAPHORE;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);
    [userAreaPageNumber*512+RESOURCE_TABLE_OFFSET+semId*2] = -1;
endif;
endif;

SP = userSP;
[PROCESS_TABLE + ( currentPID * 16) + 9] = 0;
ireturn;
