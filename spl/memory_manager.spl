alias functionNum R1;
if (functionNum == GET_FREE_PAGE) then
    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
    while ([SYSTEM_STATUS_TABLE+2] == 0) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4]=WAIT_MEM;
        multipush(R1);
        call SCHEDULER;
        multipop(R1);
    endwhile;
    [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;

    alias pageNum R2;
    pageNum = 0;
    while (pageNum<NUM_MEM_PAGES) do
        if ([MEMORY_FREE_LIST + pageNum] == 0) then
            break;
        endif;
        pageNum = pageNum + 1;
    endwhile;
    [MEMORY_FREE_LIST + pageNum]=1;
    R0=pageNum;
else
    if (functionNum == RELEASE_PAGE) then
        alias physicalPageNum R2;
        alias numProcess R3;
        numProcess = [MEMORY_FREE_LIST+physicalPageNum] - 1;
        [MEMORY_FREE_LIST+physicalPageNum] = numProcess;
        if (numProcess==0) then
            [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
        endif;
        alias newPID R4;
        while(newPID < 16) do
	        alias status R5;
	        status = [PROCESS_TABLE + 16 * newPID + 4];
	        alias pid R6;
	        pid = [PROCESS_TABLE + 16 * newPID + 1];
	        if(status == WAIT_MEM && pid != -1) then
                [PROCESS_TABLE + 16 * newPID + 4] = READY;
	        endif;
            newPID = newPID + 1;
        endwhile;
    else
        if (functionNum == RELEASE_BLOCK) then
            alias blockNum R2;
            // alias givenPID R3;
            [DISK_FREE_LIST+blockNum]=[DISK_FREE_LIST+blockNum]-1;
        else
            if (functionNum == GET_CODE_PAGE) then
                alias blockNum R2;
                multipush(R1,R2);
                R1=GET_FREE_PAGE;
                call MEMORY_MANAGER;
                multipop(R1,R2);

                alias free_page R0;
                multipush(R0,R1,R2);
                R1=DISK_LOAD;
                R4=blockNum;
                R2=[SYSTEM_STATUS_TABLE+1];
                R3=free_page;
                call DEVICE_MANAGER;
                multipop(R0,R1,R2);
            endif;
        endif;
    endif;
endif;
return;