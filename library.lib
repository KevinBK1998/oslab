PUSH BP
MOV BP,SP
JMP MAIN

COMPARE_FUN:MOV R2,R1
MOV R1, 6
CALL GET_ARGS
EQ R0,R2
RET

GET_ARGS:MOV R0, BP
SUB R0, R1
MOV R0, [R0]
RET

GET_HB_SIZE:MOV R0, 2048
MOV R1, 4
RET

MAIN:MOV R1, "Heapset"
CALL COMPARE_FUN
JZ R0, ALLOC_CHECK
CALL GET_HB_SIZE
SUB R0, R1
MOV R2, R0
HEAP_LOOP:SUB R2, R1
MOV [R0],R2
SUB R0, R1
MOV R3, 1024
EQ R3, R0
JZ R3, HEAP_LOOP
MOV [R0],-1
JMP END

ALLOC_CHECK:MOV R1, "Alloc"
CALL COMPARE_FUN
JZ R0, WRITE_CHECK
CALL GET_HB_SIZE
SUB R0, R1
MOV R1, [R0]
MOV R2, [R1]
MOV [R0], R2
MOV R0, R1
JMP END

WRITE_CHECK:MOV R1, "Write"
CALL COMPARE_FUN
JZ R0, READ_CHECK
MOV R0, 5
JMP PUSH_ARGS

READ_CHECK:MOV R1, "Read"
CALL COMPARE_FUN
JZ R0, EXEC_CHECK
MOV R0, 7
JMP PUSH_ARGS

EXEC_CHECK:MOV R1, "Exec"
CALL COMPARE_FUN
JZ R0, END
MOV R0, 9
JMP PUSH_ARGS

PUSH_ARGS:PUSH R0
MOV R1, 5
CALL GET_ARGS
PUSH R0
MOV R1, 4
CALL GET_ARGS
PUSH R0
MOV R1, 3
CALL GET_ARGS
PUSH R0
PUSH R0
MOV R1, "Write"
CALL COMPARE_FUN
JZ R0, READ_CALL_CHECK
INT 7
JMP POP_ARGS

READ_CALL_CHECK:MOV R1, "Read"
CALL COMPARE_FUN
JZ R0, EXEC_CALL_CHECK
INT 6
JMP POP_ARGS

EXEC_CALL_CHECK:MOV R1, "Exec"
CALL COMPARE_FUN
JZ R0, END
INT 9
JMP POP_ARGS

POP_ARGS:POP R1
POP R0
POP R0
POP R0
POP R0
MOV R0, R1
JMP END

END:
MOV R2,R0
MOV R0, BP
MOV R1, 2
SUB R0,R1
MOV [R0], R2
MOV BP, [SP]
POP R0
RET
